vuerouter

index.js:
Vue.use(VueRouter)
const routes = [
    {
        path:
        component:
        meta:
    },
]
const router = new VueRouter({
    routes,
})


一：作用
   vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。
   设定访问路径，将组件和路径连接起来，
   
二：SPA ->对应MPA
        ->优缺点->不利于SEO->用SSR方式解决
               ->首屏加载速度慢->路由懒加载
    单页面应用
    它将所有的活动局限于一个Web页面中，仅在该Web页面初始化时加载相应的HTML、JavaScript 和 CSS。
      一旦页面加载完成了，SPA不会因为用户的操作而进行页面的重新加载或跳转。
      而是利用JavaScript动态的变换HTML，默认Hash模式是采用锚点实现路由以及元素组件的显示与隐藏实现交互，
    SPA是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，
      这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（HTML、JavaScript和CSS）都通过单个页面的加载而检索，
      或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面页面在任何时间点都不会重新加载，也不会将控制转移到其他页面

三：路由懒加载
    含义：整个网页默认是刚打开就去加载所有页面，路由懒加载就是只加载你当前点击的那个模块。
         当打包构建SPA应用时，JavaScript 包会变得非常大，影响页面加载。
         如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。
    作用：按需去加载路由对应的资源，提高首屏加载速度（tip:首页不用设置懒加载，而且一个页面加载过后再次访问不会重复加载）。
    实现原理：将路由相关的组件，不再直接导入了，而是改写成异步组件的写法，只有当函数被调用的时候，才去加载对应的组件内容。
    使用：常用的懒加载方式有两种：即使用vue异步组件 和 ES中的import(动态导入)
         代码：let HelloWorld = （）=>import(‘需要加载的模块地址’)
               component：resolve=>([‘需要加载的路由的地址’，resolve])

四：动态路由，静态路由
    静态路由是指由网络管理员手工配置的路由信息。当网络的拓扑结构或链路的状态发生变化时，网络管理员需要手工去修改路由表中相关的静态路由信息。
    动态路由是指路由器能够自动地建立自己的路由表，并且能够根据实际实际情况的变化适时地进行调整。
      动态路由机制的运作依赖路由器的两个基本功能：对路由表的维护;路由器之间适时的路由信息交换。

五：前后端分离
    前后端分离就是一个应用的前端代码和后端代码分开写
    前端只需要独立编写客户端代码，后端也只需要独立编写服务端代码提供数据接口即可
    前后端开发者只需要提前约定好接口文档（URL、参数、数据类型…），然后分别独立开发即可
      前端可以造假数据进行测试，完全不需要依赖于后端，最后完成前后端集成即可

六：图片懒加载 vue-Lazyload
    性质：vue插件
    使用场景：可以想象一个网页打开有成百上千的图片需要加载，页面会变得非常的卡顿，此时如果只是可视区域的图片加载，
    其他的图片可以暂时有一个占位 loading 图，等滚动它们到可视区域时再去请求真实图片并且替换就好了

